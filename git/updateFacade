#!/bin/bash
# HA-1 值，以及用户准备推送的内容的 SHA-1 值
branch=$1
pre_id=$2
commt_id=$3

#git user info:include author & commitor
user_info="\n"$(git --no-pager show -s --format='作者:%an <%ae> ; 提交人:%cn <%ce>' $commt_id)

#exit code to return,if ne zero then reject the commit or merge request
ex_code=0

#prepare for send email to the commitor the request is rejected
commitor_email=$(git --no-pager show -s --format='%ce')
#send to the commitor info  for rejecting the commitment
reject_info="\n你的分支： $branch  本次提交的代码存在问题\ncommit id:$commt_id"$user_info"\n"$(date "+DATE:     %Y-%m-%d %H:%M:%S")
#for dingding robot api: send to the arch group
curl_exec="curl https://oapi.dingtalk.com/robot/send?access_token=451537893a0c372565a8efa0238d3b7076757547150d103f04179c73842b2101 -H 'Content-Type: application/json'"
json_msg=" -d '{\"msgtype\":\"text\",\"text\":{\"content\":\"";
curl_exec_prefix=$curl_exec$json_msg
json_end="\"}}'"

### the function area begin 
#---------------------------------------------------------------------------------------
# check the comments in the form of: [opt|bug|new]@version#:msg
check_comment(){
vc=$(git cat-file commit $commt_id |awk '/^$/{getline;print;exit }' )
#echo ">>>>>>>>>>>>>>>>>>>>>获取的注释应该只有一行: $vc"
if [[ $vc == Merge* ]] 
then
  echo "========= 合并分支，注释合法 ========" | tee -a  /var/log/gitpush-java-002.log
  return 0
fi

vuse=$(echo "$vc" | grep -E -i '^(opt|new|bug)@(.*)#:(.*)$' )
if [ "$vuse" = "" ]
then		
  msg="提醒："$reject_info"\ncommit comments:"$vc"\n错误: 注释信息与规定的格式： [opt|bug|new]@version#:msg 不匹配\n  注释中符号#及：都是英文半角字符\n  opt表标示修改，bug表示修改BUG,new表示新增功能\n  version表示当前所在分支，#后面为环境相关，如果需要运维配置的需要加env，无关的不需要填,:后为配置信息"
  # echo -e $msg | mail -s "iPublish reject" $commitor_email 
  echo -e $msg | tee -a  /var/log/gitpush-java-002.log
  exec_curl=$curl_exec_prefix$msg$json_end
  eval $exec_curl
  return 0 
fi
return 0
}   
#查找文件中是否有windows的回车换行，可以通过file命令来实现，但是需要获取到当前文件的文件名	
isLF(){
 git show $commt_id:$1 > temp_utf.txt
 vuse=$(find ./temp_utf.txt -not -type d -exec file "{}" ";" | grep CRLF)
  if [ "$vuse" != "" ]
  then		
    msg="拒绝提交:"$reject_info"\n文件名:$1\n失败原因: 被拒绝, 文件内容中必须只有 linux LF ，而不能含有windows的 CRLF "
    #output log and send email
    #echo -e $msg | mail -s "iPublish reject" "$commitor_email" 
    echo -e $msg | tee -a /var/log/gitpush-java-002.log
    #send to dingding robot
    exec_curl=$curl_exec_prefix$msg$json_end
    #echo -e "---->$exec_curl" | tee -a /var/log/gitpush-java-002.log
    eval $exec_curl
    rm -f temp_utf.txt
    return 1
  fi
  rm -f temp_utf.txt
  return 0
}

#check if the file is encoded as UTF-8
isUTF8(){
  if [ $ex_code -eq 1 ]
  then
     return 1
  fi
  content=$(git show $commt_id:$1) 
  echo $content > temp_sql.txt
  file_info=$(file temp_sql.txt | grep -i 'utf-8')
  file_info_ascii=$(file temp_sql.txt | grep -i 'ascii')
  #echo $(file temp_sql.txt)
  if [  "$file_info" = "" -a "$file_info_ascii" = "" ]
  then
    msg="拒绝提交:"$reject_info"\nfile:"$1"\n失败原因:被拒绝，java文件的字符集必须为： UTF-8"
    #echo -e $msg|mail -s "iPublish reject" $commitor_email 
    #echo -e "file info: $(file temp_sql.txt)"
    echo -e $msg | tee -a  /var/log/gitpush-java-002.log
    rm -f temp_sql.txt
    exec_curl=$curl_exec_prefix$msg$json_end
    eval $exec_curl
    return 1 
  fi
  rm -f temp_sql.txt
  return 0
}

# get package:获取当前类所在的模块package
fullPackage=""
get_package(){
    echo "参数为： $1 -- $2"
    origin_package=$2

    echo "所在的包: $origin_package"
    OLD_IFS="$IFS"
    IFS="."
    packages=($origin_package)
    IFS=$OLD_IFS
    fullPackage=${packages[0]}"."${packages[1]}"."${packages[2]}"."${packages[3]}
    echo "full package $fullPackage"
}
## check_star 不允许有import org.*
check_star(){
  if [[ "$LINE" =~ \*\;$ ]]
  then
    msg="提交拒绝:不允许在包中包含*"
    echo $msg | tee -a  /var/log/gitpush-java-002.log
    curl=$curl_exec_prefix$msg$json_end
    eval $exec_curl
    return 1
  fi
  return 0
}
## facade check : 不允许有其它的facade、mapper、dao出现
check_facade(){
  git show $commt_id:"$line" > temp_facade.txt
  while read LINE
  do	
  #截取package
  if [[ $LINE =~ ^package.* ]]
  then
    check_star $LINE
    star=$?
    if [ $star -eq 1 ]
    then
       return 1
    fi
    get_package $LINE
    localPackage=$fullPackage
    #echo "======== local package: $localPackage"
  fi
  if [[ $LINE =~ ^import.* ]]
  then 
    #echo "========= import 代码行 ========="
    #echo $LINE
    if [[ $LINE =~ .*Facade\;$|.*FacadeImpl\;$|.*Mapper\;$|.*DAO\;$  ]]
    then
      get_package $LINE
      import_package=$fullPackage
      echo " === import_package: $import_package"
      if [ "$localPackage" == "$import_package" ]
      then
        echo "=== 相同的包 ：localPackage:$localPackage,import_package:$import_package "
        continue
      fi
      msg="拒绝提交：Facade不允许引用Facade、DAO、Mapper,类：$LINE"
      echo $msg | tee -a  /var/log/gitpush-java-002.log
      curl=$curl_exec_prefix$msg$json_end
      eval $exec_curl
      return 1
    fi
  fi
  done < temp_facade.txt
  return 0
}
## service check: 不允许有其它命名空间的service,也不允许有Mapper,Facade
check_service(){
  ex_code=0
  git show $commt_id:"$line" > temp_service.txt
  while read LINE
  do
  #截取package
  if [[ $LINE =~ ^package.* ]]
  then
    check_star $LINE
    star=$?
    if [ $star -eq 1 ]
    then
       return 1
    fi
    get_package $LINE
    localPackage=$fullPackage
    echo "======== local package: $localPackage"
  fi  
  #判断非法性
    if [[ $LINE =~ ^import.* ]]
    then
      #echo "=== import:: $LINE "
      if [[ $LINE =~ .*ServcieImpl\;$|.*Service\;$ && !($LINE =~ springframework) ]]
      then  
        echo "=== import service :: $LINE "
        get_package $LINE
        import_package=$fullPackage
        echo "=== import_package: $import_package"
        if [ "$import_package" != "$localPackage"  ]
        then 
          msg="拒绝提交：===== 不是同一个模块中的Service: $LINE ==="
          echo $msg | tee -a /var/log/gitpush-java-002.log
          curl=$curl_exec_prefix$msg$json_end
          eval $exec_curl
          ex_code=1 
          break
        fi
      fi
      ## 不允许是facade mapper
      if [[ $LINE =~ .*Mapper\;$|.*Facade\;$|.*FacadeImpl\;$ ]]
      then
        msg="拒绝提交：Service层不允许调用Mapper,facade,*"
        echo $msg | tee -a /var/log/gitpush-java-002.log
        curl=$curl_exec_prefix$msg$json_end
        eval $exec_curl
        ex_code=1
        #echo "=== in service ex_code : $ex_code "
        break
      fi
    fi
 done < temp_service.txt
 return $ex_code
}
# loop to check every file in the commit with the functions above 
exec_fun(){
check_comment
ex_code=$?
if [ $ex_code -eq 1 ]
then
  return 1
fi
git diff --name-only --diff-filter=d $pre_id $commt_id > tmp.txt 
cat tmp.txt | while read line
do   
  if [ $(echo "$line" | grep -E "java$") ]
  then
    isLF $line
    ex_code=$?
    #echo "fun isLF ex_code : $ex_code"
    if [ $ex_code -eq 1 ]
    then 
      return 1 
    fi
    
    isUTF8 $line
    ex_code=$?
    #echo "fun isUtf8 ex_code : $ex_code"
    if [ $ex_code -eq 1 ]
    then 
      return 1 
    fi
    
    if [[ $(echo "$line" | grep -E "FacadeImpl.java$") ]]
    then
      echo "=== facade java file : $line "
      check_facade $line
      ex_code=$?
      if [ $ex_code -eq 1 ]
      then
        return 1
      fi
    fi
    
    if [[ $(echo "$line" | grep -E "ServiceImpl.java$") ]]
    then
      echo " === service java file : $line "
      check_service $line
      ex_code=$?
      echo "check service result ex_code: $ex_code"
      if [ $ex_code -eq 1 ]
      then
        echo " check service ex_code: $ex_code"
        return 1
      fi
    fi

    #class lines more than 1000
    max_line=1000
    git show $commt_id:"$line" > templ.txt
    lines=$(cat templ.txt | wc -l)
    if [ $lines -gt $max_line ]
    then
      msg="拒绝提交:"$reject_info"\n文件:"$line"\n失败原因: java代码不能超过$max_line行!"
      echo -e $msg  | tee -a /var/log/gitpush-javava-002.log 
      exec_url=$curl_exec_prefix$msg$json_end
      eval $exec_curl 
      return 1 
     fi
  fi
  return 0
done
}
#finish
exec_fun
ex_code=$?
echo -e "\n-- ex_code : $ex_code" | tee -a /var/log/gitpush-java-002.log
#ex_code=0
exit $ex_code
