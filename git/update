#!/bin/bash
# HA-1 值，以及用户准备推送的内容的 SHA-1 值
branch=$1
pre_id=$2
commt_id=$3

#git user info:include author & commitor
user_info="\n"$(git --no-pager show -s --format='作者:%an <%ae> ; 提交人:%cn <%ce>' $commt_id)

#exit code to return,if ne zero then reject the commit or merge request
ex_code=0

#prepare for send email to the commitor the request is rejected
commitor_email=$(git --no-pager show -s --format='%ce')
#echo -E "提交人的邮箱： $commitor_email"
#send to the commitor info  for rejecting the commitment
#reject_info="\nREJECTED:you branch $branch  is rejected from gitlab server\ncommit_id:$commt_id"$user_info"\n"$(date "+DATE: %Y-%m-%d %H:%M:%S")
#TEST
reject_info="\n警告:你的分支： $branch  本次提交的代码存在问题\ncommit id:$commt_id"$user_info"\n"$(date "+DATE:     %Y-%m-%d %H:%M:%S")
#for dingding robot api: send to the arch group
curl_exec="curl https://oapi.dingtalk.com/robot/send?access_token=451537893a0c372565a8efa0238d3b7076757547150d103f04179c73842b2101 -H 'Content-Type: application/json'"
json_msg=" -d '{\"msgtype\":\"text\",\"text\":{\"content\":\"";
curl_exec_prefix=$curl_exec$json_msg
json_end="\"}}'"
#echo -e  "---$curl_exec_prefix" |  tee -a /var/log/gitpush-java-002.log

### the function area begin 
#---------------------------------------------------------------------------------------
# check the comments in the form of: [opt|bug|new]@version#:msg
check_comment(){
vc=$(git cat-file commit $commt_id | sed '1,/^$/d')
vuse=$(echo "$vc" | grep -E -i '^(opt|new|bug)@(.*)#:(.*)$' )
if [ "$vuse" = "" ]
then		
  msg=$reject_info"\ncommit comments:"$vc"\n错误: 注释信息与规定的格式： [opt|bug|new]@version#:msg 不匹配\n  注释中符号#及：都是英文半角字符\n  opt表标示修改，bug表示修改BUG,new表示新增功能\n  version表示当前所在分支，#后面为环境相关，如果需要运维配置的需要加env，无关的不需要填,:后为配置信息"
  # echo -e $msg | mail -s "iPublish reject" $commitor_email 
  echo -e $msg | tee -a  /var/log/gitpush-java-002.log
  exec_curl=$curl_exec_prefix$msg$json_end
  eval $exec_curl
  return 0 
fi
return 0
}   
#查找文件中是否有windows的回车换行，可以通过file命令来实现，但是需要获取到当前文件的文件名	
isLF(){
 git show $commt_id:$1 > temp_utf.txt
 vuse=$(find ./temp_utf.txt -not -type d -exec file "{}" ";" | grep CRLF)
  if [ "$vuse" != "" ]
  then		
    msg=$reject_info"\n文件名:$1\n提交失败: 被拒绝, 文件内容中必须只有 linux LF ，而不能含有windows的 CRLF "
    #output log and send email
    #echo -e $msg | mail -s "iPublish reject" "$commitor_email" 
    echo -e $msg | tee -a /var/log/gitpush-java-002.log
    #send to dingding robot
    exec_curl=$curl_exec_prefix$msg$json_end
    #echo -e "---->$exec_curl" | tee -a /var/log/gitpush-java-002.log
    eval $exec_curl
    rm -f temp_utf.txt
    return 1
  fi
  rm -f temp_utf.txt
  return 0
}

#check if the file is encoded as UTF-8
isUTF8(){
  if [ $ex_code -eq 1 ]
  then
     return 1
  fi
  content=$(git show $commt_id:$1) 
  echo $content > temp_sql.txt
  file_info=$(file temp_sql.txt | grep -i 'utf-8')
  file_info_ascii=$(file temp_sql.txt | grep -i 'ascii')
  #echo $(file temp_sql.txt)
  if [  "$file_info" = "" -a "$file_info_ascii" = "" ]
  then
    msg=$reject_info"\nfile:"$1"\n提交失败:被拒绝，java文件的字符集必须为： UTF-8"
    #echo -e $msg|mail -s "iPublish reject" $commitor_email 
    #echo -e "file info: $(file temp_sql.txt)"
    echo -e $msg | tee -a  /var/log/gitpush-java-002.log
    rm -f temp_sql.txt
    exec_curl=$curl_exec_prefix$msg$json_end
    eval $exec_curl
    return 1 
  fi
  rm -f temp_sql.txt
  return 0
}

# check file size too large to upload
check_fileSize() {
    git show $commt_id:"$line" > temps.txt
    #file_size=$(ls -l $1 | awk '{print $5}')
    file_size=$(ls -l temps.txt | awk '{print $5}')
    #echo -e "file size is : $file_size"
    if [ $file_size -gt 20971520 ]
    then
      msg=$reject_info"your file size should not great than 20M!"
      #output log and send email to the commitor
      #echo -e $msg | mail -s "iPublis reject" $commitor_email 
      echo -e $msg |tee -a  /var/log/gitpush-java-002.log
      exec_url=$curl_exec_prefix$msg$json_end
      eval $exec_curl
      return 0
    fi
    return 0
}
notInWhiteList() {
 ret=0
 case $1 in
  FlatsFacadeImpl.java) 
    ret=1
    ;;
  SaleContractFacadeImpl.java)
    ret=1
    ;;
  FlatsServiceImpl.java)
    ret=1
    ;;
  FlatsRoomFacadeImpl.java)
    ret=1
    ;;
  SaleContractFacadeImplNew.java)
    ret=1
    ;;
  UserServiceImpl.java)
    ret=1
    ;;
  FlatsManageController.java)
    ret=1
    ;;
  BillServiceImpl.java)
    ret=1
    ;;
  SaleBillFacadeImpl.java)
    ret=1
    ;;
  RoomSearchServiceImpl.java)
    ret=1
    ;;
  LoanMogoCreditFacadeImpl.java)
    ret=1
    ;;
  RoomFacadeImpl.java)
    ret=1
    ;;

esac
return $ret
}
# ----------- function end ------------------------------------------------------------

# loop to check every file in the commit with the functions above 
exec_fun(){
check_comment
ex_code=$?
if [ $ex_code -eq 1 ]
then
  return 1
fi
git diff --name-only --diff-filter=d $pre_id $commt_id > tmp.txt 
cat tmp.txt | while read line
do   
  if [ $(echo "$line" | grep -E "java$") ]
  then
    isLF $line
    ex_code=$?
    #echo "fun isLF ex_code : $ex_code"
    if [ $ex_code -eq 1 ]
    then 
      return 1 
    fi
    
    isUTF8 $line
    ex_code=$?
    #echo "fun isUtf8 ex_code : $ex_code"
    if [ $ex_code -eq 1 ]
    then 
      return 1 
    fi

    #call check file size function
    check_fileSize "$line"
    exec_code=$?
    if [ $ex_code -eq 1 ]
    then
      return 1
    fi

    #class lines more than 4000
    git show $commt_id:"$line" > templ.txt
    lines=$(cat templ.txt | wc -l)
    shortname=`basename $line`
    notInWhiteList $shortname
    inWhite=$?
    if [ $inWhite -eq 1 ]
    then
      echo "$shortname 在白名单中了，不检查，返回0"
      return 0
    fi
    
    if [ $lines -gt 4000 ]
    then
      msg=$reject_info"\n文件:"$line"\n提交失败: java代码不能超过4000行!"
      echo -e $msg  | tee -a /var/log/gitpush-javava-002.log 
      exec_url=$curl_exec_prefix$msg$json_end
      eval $exec_curl 
      return 1 
     fi
  fi
  return 0
done
}
#finish
exec_fun
ex_code=$?
echo -e "\n-- ex_code : $ex_code" | tee -a /var/log/gitpush-java-002.log
#ex_code=0
exit $ex_code
